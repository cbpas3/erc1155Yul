pragma solidity 0.8.7;
import "hardhat/console.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
interface IYul_Test {
    function balanceOf(address account, uint256 id) external view returns(uint256);
    function mint(address,uint256,uint256,bytes memory) external returns(bool);
    function mintBatch(address,uint256[] calldata,uint256[] calldata,bytes calldata) external;
    function uri(uint256) external view returns(string memory);
}   

contract Yul_Caller {
    address public yulContractAddress;
    constructor(){
        address b;
        assembly {
            mstore(0x0,0x336000557f68747470733a2f2f746f6b656e2d63646e2d646f6d61696e2f7b69)
            mstore(0x20,0x647d2e6a736020556137b760f11b6040556103c98061003f6000396000f3fe60)
            mstore(0x40,0xc06080526000803560e01c90818062fdd58e146101b4578063731133e9146101)
            mstore(0x60,0x0e5780639550a975146100d85780631f7fdffa1461006957630e89341c146100)
            mstore(0x80,0x49576020918152f35b6080906100676020600052602260205260205460405260)
            mstore(0xa0,0x4054606052565bf35b50905061007c6100776101da565b6103c2565b60249081)
            mstore(0xc0,0x35604435816004013592610099826004013585146103c2565b8381106100af57)
            mstore(0xe0,0x50505050506100ad610223565b005b806100d260019260051b87868187840101)
            mstore(0x100,0x35920101356100cd6101da565b610251565b01610099565b5061955091505261)
            mstore(0x120,0x00ad6100776100ed61020a565b6100f56101fc565b906100fe6101da565b9160)
            mstore(0x140,0x64356004013592333361033e565b50505061011c6100776101da565b61013761)
            mstore(0x160,0x012761020a565b61012f6101fc565b6100cd6101da565b61015f61014261020a)
            mstore(0x180,0x565b61014a6101fc565b6101526101da565b61015a6101da565b610263565b61)
            mstore(0x1a0,0x017261016a6101da565b503233141990565b61017f575b6100ad610223565b61)
            mstore(0x1c0,0x01af61007760643560248160040135910161019961020a565b6101a16101fc56)
            mstore(0x1e0,0x5b6101a96101da565b33610294565b610177565b5060fd9150526100ad6101d5)
            mstore(0x200,0x6101c86101fc565b6101d06101da565b610243565b610218565b602436106101)
            mstore(0x220,0xf757600435906001600160a01b031982166101f757565b600080fd5b60443610)
            mstore(0x240,0x6101f75760243590565b606436106101f75760443590565b9050600052602060)
            mstore(0x260,0x00f35b50600160005260206000f35b9060806000526020526040526060600020)
            mstore(0x280,0x90565b9061024d9161022f565b5490565b9061025b9161022f565b9081540190)
            mstore(0x2a0,0x55565b909260009283526020527fc3d58168c5ae7397731d063d5bbf3d657854)
            mstore(0x2c0,0x427343f4c083240f7aacaa2d0f62604083a4565b929594919593909360009632)
            mstore(0x2e0,0x3314196102b0575b505050505050565b60809463f23a6e6160e01b8651526004)
            mstore(0x300,0x86510152600060248651015260448551015260648451015260a0608484510152)
            mstore(0x320,0x81610319575b50600181106102f8575b8080806102a8565b6004939450918160)
            mstore(0x340,0x009360a460c494510152519283915af1903880806102f0565b8180965060a484)
            mstore(0x360,0x51015260c483510137600481518560a401816000865af193386102e6565b9295)
            mstore(0x380,0x94919390956000963233141961035857505050505050565b60809463f23a6e61)
            mstore(0x3a0,0x60e01b86515260048651015260248551015260448451015260648351015260a0)
            mstore(0x3c0,0x6084835101528061039c575b600181106102f8578080806102a8565b80945060)
            mstore(0x3e0,0xa48251015283606460c483510137600481518560a401816000865af19361038c)
            mstore(0x400,0x565b156101f75756000000000000000000000000000000000000000000000000)
            b:= create(0,0x00, 0x420)
        }
        if(b == address(0)){
            console.log("Something went wrong.");
        } else{
            yulContractAddress = b;
        }

    }
    

    function balanceOf(address account, uint256 id) public view returns(uint256){
        return IYul_Test(yulContractAddress).balanceOf(account, id);
    }

    function mint(address to, uint256 id, uint256 amount, bytes memory data) public returns(bool){
        return IYul_Test(yulContractAddress).mint(to,id,amount,data);
    }

    function mintBatch(
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) public{
        IYul_Test(yulContractAddress).mintBatch(to, ids, amounts, data);
    }

    function uri() public view returns(string memory){
        return IYul_Test(yulContractAddress).uri(0);
    }

}

