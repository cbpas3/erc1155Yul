pragma solidity 0.8.7;
import "hardhat/console.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
interface IYul_Test {
    function balanceOf(address account, uint256 id) external view returns(uint256);
    function mint(address,uint256,uint256,bytes memory) external returns(bool);
    function mintBatch(address,uint256[] calldata,uint256[] calldata,bytes calldata) external;
    function uri(uint256) external view returns(string memory);
}   

contract Yul_Caller {
    address public yulContractAddress;
    constructor(){
        address b;
        assembly {
            mstore(0x0,0x336000557f68747470733a2f2f746f6b656e2d63646e2d646f6d61696e2f7b69)
            mstore(0x20,0x647d2e6a736020556137b760f11b6040556104228061003f6000396000f3fe60)
            mstore(0x40,0xc06080526000803560e01c90818062fdd58e146101a5578063731133e9146101)
            mstore(0x60,0x005780631f7fdffa1461005e57630e89341c1461003e576020918152f35b6080)
            mstore(0x80,0x9061005c60206000526022602052602054604052604054606052565bf35b5090)
            mstore(0xa0,0x506024803591826004019182359060443593846004019182359461008a610085)
            mstore(0xc0,0x6101cb565b61041b565b61009586861461041b565b8481106100d75750509261)
            mstore(0xe0,0x008594926100bb926100cd97956100b56101cb565b33610285565b6064359161)
            mstore(0x100,0x00c76101cb565b3361038b565b6100d5610214565b005b806100fa6001926005)
            mstore(0x120,0x1b848b818c84010135920101356100f56101cb565b610242565b01610095565b)
            mstore(0x140,0x50505061010e6100856101cb565b6101296101196101fb565b6101216101ed56)
            mstore(0x160,0x5b6100f56101cb565b6101516101346101fb565b61013c6101ed565b61014461)
            mstore(0x180,0x01cb565b61014c6101cb565b610254565b61016461015c6101cb565b50323314)
            mstore(0x1a0,0x1990565b610170576100d5610214565b6101a061008560643560248160040135)
            mstore(0x1c0,0x910161018a6101fb565b6101926101ed565b61019a6101cb565b336102e1565b)
            mstore(0x1e0,0x6100cd565b5060fd9150526100d56101c66101b96101ed565b6101c16101cb56)
            mstore(0x200,0x5b610234565b610209565b602436106101e857600435906001600160a01b0319)
            mstore(0x220,0x82166101e857565b600080fd5b604436106101e85760243590565b6064361061)
            mstore(0x240,0x01e85760443590565b905060005260206000f35b50600160005260206000f35b)
            mstore(0x260,0x906080600052602052604052606060002090565b9061023e91610220565b5490)
            mstore(0x280,0x565b9061024c91610220565b908154019055565b909260009283526020527fc3)
            mstore(0x2a0,0xd58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260)
            mstore(0x2c0,0x4083a4565b92947f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d)
            mstore(0x2e0,0x983b8c0526c8f7fb92600095929660608460051b604060805152818101602060)
            mstore(0x300,0x80510152806020018094604060805101376080510101370160061b608051a456)
            mstore(0x320,0x5b9295949195939093600096323314196102fd575b505050505050565b608094)
            mstore(0x340,0x63f23a6e6160e01b865152600486510152600060248651015260448551015260)
            mstore(0x360,0x648451015260a060848451015281610366575b5060018110610345575b808080)
            mstore(0x380,0x6102f5565b6004939450918160009360a460c494510152519283915af1903880)
            mstore(0x3a0,0x8061033d565b8180965060a48451015260c483510137600481518560a4018160)
            mstore(0x3c0,0x00865af19338610333565b929493600095323314196103a1575b505050505056)
            mstore(0x3e0,0x5b61041194965091600491601c9363bc197c8160e01b95608099878b5152858b)
            mstore(0x400,0x510152600060248b51015260200160448a510152602001606489510152602001)
            mstore(0x420,0x6084885101526083193601608460a48951013786519083368301019160006020)
            mstore(0x440,0x3601925af19451360101511461041b565b388080808061039a565b156101e857)
            mstore(0x460,0x5600000000000000000000000000000000000000000000000000000000000000)
            b:= create(0,0x00, 0x480)
        }
        if(b == address(0)){
            console.log("Something went wrong.");
        } else{
            yulContractAddress = b;
        }

    }
    

    function balanceOf(address account, uint256 id) public view returns(uint256){
        return IYul_Test(yulContractAddress).balanceOf(account, id);
    }

    function mint(address to, uint256 id, uint256 amount, bytes memory data) public returns(bool){
        return IYul_Test(yulContractAddress).mint(to,id,amount,data);
    }

    function mintBatch(
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) public{
        IYul_Test(yulContractAddress).mintBatch(to, ids, amounts, data);
    }

    function uri() public view returns(string memory){
        return IYul_Test(yulContractAddress).uri(0);
    }

}

