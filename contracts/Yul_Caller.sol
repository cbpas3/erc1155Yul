pragma solidity 0.8.7;
import "hardhat/console.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
interface IYul_Test {
    function balanceOf(address account, uint256 id) external view returns(uint256);
    function mint(address,uint256,uint256,bytes memory) external returns(bool);
    function mintBatch(address,uint256[] calldata,uint256[] calldata,bytes calldata) external;
    function uri(uint256) external view returns(string memory);
}   

contract Yul_Caller {
    address public yulContractAddress;
    constructor(){
        address b;
        assembly {
            mstore(0x0,0x336000557f68747470733a2f2f746f6b656e2d63646e2d646f6d61696e2f7b69)
            mstore(0x20,0x647d2e6a736020556137b760f11b6040556103f08061003f6000396000f3fe60)
            mstore(0x40,0xc060805260003560e01c808062fdd58e1461019b578063731133e91461010257)
            mstore(0x60,0x80631f7fdffa1461005f57630e89341c1461003e5760005260206000f35b6100)
            mstore(0x80,0x5960206000526022602052602054604052604054606052565b60806000f35b50)
            mstore(0xa0,0x5060248035908160040190813560443592836004019081359361008961008461)
            mstore(0xc0,0x01bd565b6103e9565b6100948585146103e9565b60005b8481106100d9575050)
            mstore(0xe0,0x9261008494926100bd926100cf97956100b76101bd565b33610277565b606435)
            mstore(0x100,0x916100c96101bd565b33610365565b6100d7610206565b005b806100fc600192)
            mstore(0x120,0x60051b848b818c84010135920101356100f76101bd565b610234565b01610097)
            mstore(0x140,0x565b505061010f6100846101bd565b61012a61011a6101ed565b6101226101df)
            mstore(0x160,0x565b6100f76101bd565b6101526101356101ed565b61013d6101df565b610145)
            mstore(0x180,0x6101bd565b61014d6101bd565b610246565b61016361015d6101bd565b3b1515)
            mstore(0x1a0,0x90565b61016f576100d7610206565b6101966100846064356101806101ed565b)
            mstore(0x1c0,0x6101886101df565b6101906101bd565b336102d3565b6100cf565b50506100d7)
            mstore(0x1e0,0x6101b86101ab6101df565b6101b36101bd565b610226565b6101fb565b602436)
            mstore(0x200,0x106101da57600435906001600160a01b031982166101da57565b600080fd5b60)
            mstore(0x220,0x4436106101da5760243590565b606436106101da5760443590565b9050600052)
            mstore(0x240,0x60206000f35b50600160005260206000f35b9060806000526020526040526060)
            mstore(0x260,0x60002090565b9061023091610212565b5490565b9061023e91610212565b9081)
            mstore(0x280,0x54019055565b909260009283526020527fc3d58168c5ae7397731d063d5bbf3d)
            mstore(0x2a0,0x657854427343f4c083240f7aacaa2d0f62604083a4565b92947f4a39dc06d4c0)
            mstore(0x2c0,0xdbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb926000959296)
            mstore(0x2e0,0x60608460051b6040608051528181016020608051015280602001809460406080)
            mstore(0x300,0x5101376080510101370160061b608051a4565b9190929493600095843b6102f4)
            mstore(0x320,0x575b505050503b156102ee57565b60019150565b61035c93965063f23a6e6160)
            mstore(0x340,0xe01b926080978489515260048951015260006024895101526044885101526064)
            mstore(0x360,0x875101526020016084865101526083193601608460a487510137601c60048651)
            mstore(0x380,0x82368201019060203601906000885af1955136010151146103e9565b38808080)
            mstore(0x3a0,0x6102e2565b9190929493600095843b61037f57505050503b156102ee57565b61)
            mstore(0x3c0,0x035c93965063bc197c8160e01b92608097848951526004895101526000602489)
            mstore(0x3e0,0x5101526020016044885101526020016064875101526020016084865101526083)
            mstore(0x400,0x193601608460a487510137601c6004865182368201019060203601906000885a)
            mstore(0x420,0xf1955136010151145b156101da57560000000000000000000000000000000000)
            b:= create(0,0x00, 0x440)
        }
        if(b == address(0)){
            console.log("Something went wrong.");
        } else{
            yulContractAddress = b;
        }

    }
    

    function balanceOf(address account, uint256 id) public view returns(uint256){
        return IYul_Test(yulContractAddress).balanceOf(account, id);
    }

    function mint(address to, uint256 id, uint256 amount, bytes memory data) public returns(bool){
        return IYul_Test(yulContractAddress).mint(to,id,amount,data);
    }

    function mintBatch(
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) public{
        IYul_Test(yulContractAddress).mintBatch(to, ids, amounts, data);
    }

    function uri() public view returns(string memory){
        return IYul_Test(yulContractAddress).uri(0);
    }

}

