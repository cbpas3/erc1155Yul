pragma solidity 0.8.7;
import "hardhat/console.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
interface IYul_Test {
    function balanceOf(address account, uint256 id) external view returns(uint256);
    function mint(address,uint256,uint256,bytes memory) external returns(bool);
    function mintBatch(address,uint256[] calldata,uint256[] calldata,bytes calldata) external;
    function uri(uint256) external view returns(string memory);
    function safeTransferFrom(address,address,uint256,uint256,bytes memory) external returns(bool);
}   

contract Yul_Caller {
    address public yulContractAddress;
    constructor(){
        address b;
        assembly {
            mstore(0x0,0x336000557f68747470733a2f2f746f6b656e2d63646e2d646f6d61696e2f7b69)
            mstore(0x20,0x647d2e6a736020556137b760f11b6040556104908061003f6000396000f3fe60)
            mstore(0x40,0xc060805260003560e01c808062fdd58e14610154578063f242432a1461012a57)
            mstore(0x60,0x8063731133e91461010d5780631f7fdffa1461006a57630e89341c1461004957)
            mstore(0x80,0x60005260206000f35b6100646020600052602260205260205460405260405460)
            mstore(0xa0,0x6052565b60806000f35b50506024803590816004019081356044359283600401)
            mstore(0xc0,0x9081359361009461008f610176565b610271565b61009f858514610271565b60)
            mstore(0xe0,0x005b8481106100e45750509261008f94926100c8926100da97956100c2610176)
            mstore(0x100,0x565b336102f9565b606435916100d4610176565b336103e7565b6100e26101e7)
            mstore(0x120,0x565b005b8061010760019260051b848b818c8401013592010135610102610176)
            mstore(0x140,0x565b610215565b016100a2565b50506100da61011a6101ce565b6101226101b2)
            mstore(0x160,0x565b610102610176565b50506100da6101376101c0565b61013f6101ce565b61)
            mstore(0x180,0x0147610198565b61014f610176565b610278565b50506100e261017161016461)
            mstore(0x1a0,0x01b2565b61016c610176565b610207565b6101dc565b60243610610193576004)
            mstore(0x1c0,0x35906001600160a01b0319821661019357565b600080fd5b6101a06101b2565b)
            mstore(0x1e0,0x906001600160a01b0319821661019357565b604436106101935760243590565b)
            mstore(0x200,0x608436106101935760643590565b606436106101935760443590565b90506000)
            mstore(0x220,0x5260206000f35b50600160005260206000f35b90608060005260205260405260)
            mstore(0x240,0x6060002090565b90610211916101f3565b5490565b9091811561019357610227)
            mstore(0x260,0x83836101f3565b80548281019190821083831017610193575582600052806020)
            mstore(0x280,0x5281600033600080516020610470833981519152604083a4813b610263575050)
            mstore(0x2a0,0x50565b610271926064359233610355565b1561019357565b9290919282156101)
            mstore(0x2c0,0x935761028c84846101f3565b9081548381019084821090821017610193578492)
            mstore(0x2e0,0x55806102cf575b84600052826020523360008051602061047083398151915260)
            mstore(0x300,0x406000a4813b61026357505050565b9050816102dc85836101f3565b54106101)
            mstore(0x320,0x9357806102ee8585936101f3565b8381540390556102a7565b92947f4a39dc06)
            mstore(0x340,0xd4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb92600095)
            mstore(0x360,0x929660608460051b604060805152818101602060805101528060200180946040)
            mstore(0x380,0x60805101376080510101370160061b608051a4565b9190929493600095843b61)
            mstore(0x3a0,0x0376575b505050503b1561037057565b60019150565b6103de93965063f23a6e)
            mstore(0x3c0,0x6160e01b92608097848951526004895101526000602489510152604488510152)
            mstore(0x3e0,0x6064875101526020016084865101526083193601608460a487510137601c6004)
            mstore(0x400,0x865182368201019060203601906000885af195513601015114610271565b3880)
            mstore(0x420,0x8080610364565b9190929493600095843b61040157505050503b156103705756)
            mstore(0x440,0x5b6103de93965063bc197c8160e01b9260809784895152600489510152600060)
            mstore(0x460,0x2489510152602001604488510152602001606487510152602001608486510152)
            mstore(0x480,0x6083193601608460a487510137601c6004865182368201019060203601906000)
            mstore(0x4a0,0x885af19551360101511461027156fec3d58168c5ae7397731d063d5bbf3d6578)
            mstore(0x4c0,0x54427343f4c083240f7aacaa2d0f620000000000000000000000000000000000)
            b:= create(0,0x00, 0x4e0)
        }
        if(b == address(0)){
            console.log("Something went wrong.");
        } else{
            yulContractAddress = b;
        }

    }
    
    function getYulContractAddress() public view returns(address){
        return yulContractAddress;
    }
    
    function balanceOf(address account, uint256 id) public view returns(uint256){
        return IYul_Test(yulContractAddress).balanceOf(account, id);
    }

    function mint(address to, uint256 id, uint256 amount, bytes memory data) public returns(bool){
        return IYul_Test(yulContractAddress).mint(to,id,amount,data);
    }
    
    function safeTransferFrom(address from,address to,uint256 id,uint256 amount ,bytes memory data) public returns(bool){
        return IYul_Test(yulContractAddress).safeTransferFrom(from,to,id,amount,data);
    }
    
    function mintBatch(
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) public{
        IYul_Test(yulContractAddress).mintBatch(to, ids, amounts, data);
    }

    function uri() public view returns(string memory){
        return IYul_Test(yulContractAddress).uri(0);
    }

}

