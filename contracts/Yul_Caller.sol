pragma solidity 0.8.7;
import "hardhat/console.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
interface IYul_Test {
    function balanceOf(address account, uint256 id) external view returns(uint256);
    function mint(address,uint256,uint256,bytes memory) external returns(bool);
}   

contract Yul_Caller {
    address public yulContractAddress;
    constructor(){
        address b;
        assembly {
            mstore(0x0,0x33600055610333806100126000396000f3fe60c06080526000803560e01c9081)
            mstore(0x20,0x8062fdd58e1461011e578063731133e91461006f57639550a975146100335760)
            mstore(0x40,0x20918152f35b61955091505261006d610068610047610174565b61004f610166)
            mstore(0x60,0x565b90610058610144565b91606435600401359233336102a8565b61032c565b)
            mstore(0x80,0x005b50617311915052610081610068610144565b6100a161008c610174565b61)
            mstore(0xa0,0x0094610166565b61009c610144565b6101bb565b6100c96100ac610174565b61)
            mstore(0xc0,0x00b4610166565b6100bc610144565b6100c4610144565b6101cd565b6100dc61)
            mstore(0xe0,0x00d4610144565b503233141990565b6100e9575b61006d61018d565b61011961)
            mstore(0x100,0x0068606435602481600401359101610103610174565b61010b610166565b6101)
            mstore(0x120,0x13610144565b336101fe565b6100e1565b5060fd91505261006d61013f610132)
            mstore(0x140,0x610166565b61013a610144565b6101ad565b610182565b602436106101615760)
            mstore(0x160,0x0435906001600160a01b0319821661016157565b600080fd5b60443610610161)
            mstore(0x180,0x5760243590565b606436106101615760443590565b905060005260206000f35b)
            mstore(0x1a0,0x50600160005260206000f35b906080600052602052604052606060002090565b)
            mstore(0x1c0,0x906101b791610199565b5490565b906101c591610199565b908154019055565b)
            mstore(0x1e0,0x909260009283526020527fc3d58168c5ae7397731d063d5bbf3d657854427343)
            mstore(0x200,0xf4c083240f7aacaa2d0f62604083a4565b929594919593909360009632331419)
            mstore(0x220,0x61021a575b505050505050565b60809463f23a6e6160e01b8651526004865101)
            mstore(0x240,0x52600060248651015260448551015260648451015260a0608484510152816102)
            mstore(0x260,0x83575b5060018110610262575b808080610212565b6004939450918160009360)
            mstore(0x280,0xa460c494510152519283915af19038808061025a565b8180965060a484510152)
            mstore(0x2a0,0x60c483510137600481518560a401816000865af19338610250565b9295949193)
            mstore(0x2c0,0x9095600096323314196102c257505050505050565b60809463f23a6e6160e01b)
            mstore(0x2e0,0x86515260048651015260248551015260448451015260648351015260a0608483)
            mstore(0x300,0x51015280610306575b6001811061026257808080610212565b80945060a48251)
            mstore(0x320,0x015283606460c483510137600481518560a401816000865af1936102f6565b15)
            mstore(0x340,0x6101615756000000000000000000000000000000000000000000000000000000)
            b:= create(0,0x00, 0x360)
        }
        if(b == address(0)){
            console.log("Something went wrong.");
        } else{
            yulContractAddress = b;
        }

    }
    

    function balanceOf(address account, uint256 id) public view returns(uint256){
        return IYul_Test(yulContractAddress).balanceOf(account, id);
    }

    function mint(address to, uint256 id, uint256 amount, bytes memory data) public returns(bool){
        return IYul_Test(yulContractAddress).mint(to,id,amount,data);
    }


}

