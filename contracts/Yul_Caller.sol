pragma solidity 0.8.7;
import "hardhat/console.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
interface IYul_Test {
    function balanceOf(address account, uint256 id) external view returns(uint256);
    function mint(address,uint256,uint256,bytes memory) external returns(bool);
    function mintBatch(address,uint256[] calldata,uint256[] calldata,bytes calldata) external;
    function uri(uint256) external view returns(string memory);
}   

contract Yul_Caller {
    address public yulContractAddress;
    constructor(){
        address b;
        assembly {
            mstore(0x0,0x336000557f68747470733a2f2f746f6b656e2d63646e2d646f6d61696e2f7b69)
            mstore(0x20,0x647d2e6a736020556137b760f11b6040556103ea8061003f6000396000f3fe60)
            mstore(0x40,0xc06080526000803560e01c90818062fdd58e1461019c578063731133e9146101)
            mstore(0x60,0x005780631f7fdffa1461005e57630e89341c1461003e576020918152f35b6080)
            mstore(0x80,0x9061005c60206000526022602052602054604052604054606052565bf35b5090)
            mstore(0xa0,0x506024803591826004019182359060443593846004019182359461008a610085)
            mstore(0xc0,0x6101c2565b6103e3565b6100958686146103e3565b8481106100d75750509261)
            mstore(0xe0,0x008594926100bb926100cd97956100b56101c2565b3361027c565b6064359161)
            mstore(0x100,0x00c76101c2565b33610362565b6100d561020b565b005b806100fa6001926005)
            mstore(0x120,0x1b848b818c84010135920101356100f56101c2565b610239565b01610095565b)
            mstore(0x140,0x50505061010e6100856101c2565b6101296101196101f2565b6101216101e456)
            mstore(0x160,0x5b6100f56101c2565b6101516101346101f2565b61013c6101e4565b61014461)
            mstore(0x180,0x01c2565b61014c6101c2565b61024b565b61016461015c6101c2565b50323314)
            mstore(0x1a0,0x1990565b610170576100d561020b565b6101976100856064356101816101f256)
            mstore(0x1c0,0x5b6101896101e4565b6101916101c2565b336102d8565b6100cd565b5060fd91)
            mstore(0x1e0,0x50526100d56101bd6101b06101e4565b6101b86101c2565b61022b565b610200)
            mstore(0x200,0x565b602436106101df57600435906001600160a01b031982166101df57565b60)
            mstore(0x220,0x0080fd5b604436106101df5760243590565b606436106101df5760443590565b)
            mstore(0x240,0x905060005260206000f35b50600160005260206000f35b906080600052602052)
            mstore(0x260,0x604052606060002090565b9061023591610217565b5490565b90610243916102)
            mstore(0x280,0x17565b908154019055565b909260009283526020527fc3d58168c5ae7397731d)
            mstore(0x2a0,0x063d5bbf3d657854427343f4c083240f7aacaa2d0f62604083a4565b92947f4a)
            mstore(0x2c0,0x39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb92)
            mstore(0x2e0,0x600095929660608460051b604060805152818101602060805101528060200180)
            mstore(0x300,0x94604060805101376080510101370160061b608051a4565b9294936000953233)
            mstore(0x320,0x14196102ee575b5050505050565b61035894965091600491601c9363f23a6e61)
            mstore(0x340,0x60e01b95608099878b5152858b510152600060248b51015260448a5101526064)
            mstore(0x360,0x895101526020016084885101526083193601608460a489510137865190833683)
            mstore(0x380,0x010191600060203601925af1945136010151146103e3565b38808080806102e7)
            mstore(0x3a0,0x565b92949360009532331419610377575050505050565b610358949650916004)
            mstore(0x3c0,0x91601c9363bc197c8160e01b95608099878b5152858b510152600060248b5101)
            mstore(0x3e0,0x5260200160448a51015260200160648951015260200160848851015260831936)
            mstore(0x400,0x01608460a489510137865190833683010191600060203601925af19451360101)
            mstore(0x420,0x51145b156101df57560000000000000000000000000000000000000000000000)
            b:= create(0,0x00, 0x440)
        }
        if(b == address(0)){
            console.log("Something went wrong.");
        } else{
            yulContractAddress = b;
        }

    }
    

    function balanceOf(address account, uint256 id) public view returns(uint256){
        return IYul_Test(yulContractAddress).balanceOf(account, id);
    }

    function mint(address to, uint256 id, uint256 amount, bytes memory data) public returns(bool){
        return IYul_Test(yulContractAddress).mint(to,id,amount,data);
    }

    function mintBatch(
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) public{
        IYul_Test(yulContractAddress).mintBatch(to, ids, amounts, data);
    }

    function uri() public view returns(string memory){
        return IYul_Test(yulContractAddress).uri(0);
    }

}

