pragma solidity 0.8.7;
import "hardhat/console.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
interface IYul_Test {
    function balanceOf(address account, uint256 id) external view returns(uint256);
    function mint(address,uint256,uint256,bytes memory) external returns(bool);
    function mintBatch(address,uint256[] calldata,uint256[] calldata,bytes calldata) external;
}   

contract Yul_Caller {
    address public yulContractAddress;
    constructor(){
        address b;
        assembly {
            mstore(0x0,0x3360005561039f806100126000396000f3fe60c06080526000803560e01c8080)
            mstore(0x20,0x62fdd58e1461018a578063731133e9146100e05780639550a975146100aa5763)
            mstore(0x40,0x1f7fdffa1461003d578152602090f35b5061004e6100496101b0565b61039856)
            mstore(0x60,0x5b602490813560443581600401359261006b82600401358514610398565b8381)
            mstore(0x80,0x1061008157505050505061007f6101f9565b005b806100a460019260051b8786)
            mstore(0xa0,0x8187840101359201013561009f6101b0565b610227565b0161006b565b505061)
            mstore(0xc0,0x9550905261007f6100496100bf6101e0565b6100c76101d2565b906100d06101)
            mstore(0xe0,0xb0565b9160643560040135923333610314565b505061731190526100f2610049)
            mstore(0x100,0x6101b0565b61010d6100fd6101e0565b6101056101d2565b61009f6101b0565b)
            mstore(0x120,0x6101356101186101e0565b6101206101d2565b6101286101b0565b6101306101)
            mstore(0x140,0xb0565b610239565b6101486101406101b0565b503233141990565b610155575b)
            mstore(0x160,0x61007f6101f9565b61018561004960643560248160040135910161016f6101e0)
            mstore(0x180,0x565b6101776101d2565b61017f6101b0565b3361026a565b61014d565b505060)
            mstore(0x1a0,0xfd905261007f6101ab61019e6101d2565b6101a66101b0565b610219565b6101)
            mstore(0x1c0,0xee565b602436106101cd57600435906001600160a01b031982166101cd57565b)
            mstore(0x1e0,0x600080fd5b604436106101cd5760243590565b606436106101cd576044359056)
            mstore(0x200,0x5b905060005260206000f35b50600160005260206000f35b9060806000526020)
            mstore(0x220,0x52604052606060002090565b9061022391610205565b5490565b906102319161)
            mstore(0x240,0x0205565b908154019055565b909260009283526020527fc3d58168c5ae739773)
            mstore(0x260,0x1d063d5bbf3d657854427343f4c083240f7aacaa2d0f62604083a4565b929594)
            mstore(0x280,0x919593909360009632331419610286575b505050505050565b60809463f23a6e)
            mstore(0x2a0,0x6160e01b86515260048651015260006024865101526044855101526064845101)
            mstore(0x2c0,0x5260a0608484510152816102ef575b50600181106102ce575b80808061027e56)
            mstore(0x2e0,0x5b6004939450918160009360a460c494510152519283915af1903880806102c6)
            mstore(0x300,0x565b8180965060a48451015260c483510137600481518560a401816000865af1)
            mstore(0x320,0x93386102bc565b929594919390956000963233141961032e5750505050505056)
            mstore(0x340,0x5b60809463f23a6e6160e01b8651526004865101526024855101526044845101)
            mstore(0x360,0x5260648351015260a060848351015280610372575b600181106102ce57808080)
            mstore(0x380,0x61027e565b80945060a48251015283606460c483510137600481518560a40181)
            mstore(0x3a0,0x6000865af193610362565b156101cd5756000000000000000000000000000000)
            b:= create(0,0x00, 0x3c0)
        }
        if(b == address(0)){
            console.log("Something went wrong.");
        } else{
            yulContractAddress = b;
        }

    }
    

    function balanceOf(address account, uint256 id) public view returns(uint256){
        return IYul_Test(yulContractAddress).balanceOf(account, id);
    }

    function mint(address to, uint256 id, uint256 amount, bytes memory data) public returns(bool){
        return IYul_Test(yulContractAddress).mint(to,id,amount,data);
    }

    function mintBatch(
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) public{
        IYul_Test(yulContractAddress).mintBatch(to, ids, amounts, data);
    }


}

