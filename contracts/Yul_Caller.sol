pragma solidity 0.8.7;
import "hardhat/console.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
interface IYul_Test {
    function balanceOf(address account, uint256 id) external view returns(uint256);
    function mint(address,uint256,uint256,bytes memory) external returns(bool);
    function mintBatch(address,uint256[] calldata,uint256[] calldata,bytes calldata) external;
}   

contract Yul_Caller {
    address public yulContractAddress;
    constructor(){
        address b;
        assembly {
            mstore(0x0,0x33600055610363806100126000396000f3fe60c06080526000803560e01c9081)
            mstore(0x20,0x8062fdd58e1461014e578063731133e91461009f5780639550a9751461006957)
            mstore(0x40,0x631f7fdffa1461003e576020918152f35b505061005061004b610174565b6103)
            mstore(0x60,0x5c565b61006760443560040135602435600401351461035c565b005b50619550)
            mstore(0x80,0x91505261006761004b61007e6101a4565b610086610196565b9061008f610174)
            mstore(0xa0,0x565b91606435600401359233336102d8565b506173119150526100b161004b61)
            mstore(0xc0,0x0174565b6100d16100bc6101a4565b6100c4610196565b6100cc610174565b61)
            mstore(0xe0,0x01eb565b6100f96100dc6101a4565b6100e4610196565b6100ec610174565b61)
            mstore(0x100,0x00f4610174565b6101fd565b61010c610104610174565b503233141990565b61)
            mstore(0x120,0x0119575b6100676101bd565b61014961004b6064356024816004013591016101)
            mstore(0x140,0x336101a4565b61013b610196565b610143610174565b3361022e565b61011156)
            mstore(0x160,0x5b5060fd91505261006761016f610162610196565b61016a610174565b6101dd)
            mstore(0x180,0x565b6101b2565b6024361061019157600435906001600160a01b031982166101)
            mstore(0x1a0,0x9157565b600080fd5b604436106101915760243590565b606436106101915760)
            mstore(0x1c0,0x443590565b905060005260206000f35b50600160005260206000f35b90608060)
            mstore(0x1e0,0x0052602052604052606060002090565b906101e7916101c9565b5490565b9061)
            mstore(0x200,0x01f5916101c9565b908154019055565b909260009283526020527fc3d58168c5)
            mstore(0x220,0xae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62604083a456)
            mstore(0x240,0x5b92959491959390936000963233141961024a575b505050505050565b608094)
            mstore(0x260,0x63f23a6e6160e01b865152600486510152600060248651015260448551015260)
            mstore(0x280,0x648451015260a0608484510152816102b3575b5060018110610292575b808080)
            mstore(0x2a0,0x610242565b6004939450918160009360a460c494510152519283915af1903880)
            mstore(0x2c0,0x8061028a565b8180965060a48451015260c483510137600481518560a4018160)
            mstore(0x2e0,0x00865af19338610280565b92959491939095600096323314196102f257505050)
            mstore(0x300,0x505050565b60809463f23a6e6160e01b86515260048651015260248551015260)
            mstore(0x320,0x448451015260648351015260a060848351015280610336575b60018110610292)
            mstore(0x340,0x57808080610242565b80945060a48251015283606460c4835101376004815185)
            mstore(0x360,0x60a401816000865af193610326565b1561019157560000000000000000000000)
            b:= create(0,0x00, 0x380)
        }
        if(b == address(0)){
            console.log("Something went wrong.");
        } else{
            yulContractAddress = b;
        }

    }
    

    function balanceOf(address account, uint256 id) public view returns(uint256){
        return IYul_Test(yulContractAddress).balanceOf(account, id);
    }

    function mint(address to, uint256 id, uint256 amount, bytes memory data) public returns(bool){
        return IYul_Test(yulContractAddress).mint(to,id,amount,data);
    }

    function mintBatch(
        address to,
        uint256[] calldata ids,
        uint256[] calldata amounts,
        bytes calldata data
    ) public{
        IYul_Test(yulContractAddress).mintBatch(to, ids, amounts, data);
    }


}

